#!/usr/bin/python3
# -*- coding: utf-8 -*-
# (c) 2024-2025 Actium

"""Plot distribution and time series for .log files generated by Benchmark.lua.

Call with pairs of benchmark log file and plot title as arguments. Example:
./benchmark_plot.py Benchmark-1.log.gz "1st file" Benchmark-2.log.gz "2nd file"
"""


import gzip
import json
import numpy as np
import matplotlib.pyplot as plt
import sys


def load_frametimes(path: str) -> np.ndarray:
    if path.endswith(".gz"):
        _open = gzip.open
    else:
        _open = open

    frame_times = []
    mission_times = []
    total_time = 0.
    with _open(path, "rt") as fh:
        # first line: meta data
        line = fh.readline()
        if not line.startswith("# META:"):
            raise ValueError(f"Not a Benchmark.lua log file: {path}")
        meta = json.loads(line.removeprefix("# META: "))

        # parse frame times (values in integer milliseconds)
        for line in fh:
            if line.startswith("# STOP"):
                mission_times.append(total_time)
            elif not line.startswith("#"):
                t = float(line) * 1e-3
                if t > 0:
                    frame_times.append(t)
                    total_time += t

    return meta, np.asarray(frame_times), mission_times


#%% plot distribution

plt.figure(figsize=(8,6))

for file, label in zip(sys.argv[1::2], sys.argv[2::2]):
    # load benchmark log file
    meta, frame_times, mission_times = load_frametimes(file)
    # sort and reverse times to get complementary cumulative distribution
    frame_times.sort()
    frame_times = frame_times[::-1]

    # compute cumulative sum to get CCDF over total duration and not number of
    # occurences (latter would skew CCDF with few, very large outliers)
    t = np.cumsum(frame_times)
    # normalize to relative duration (fraction of total mission runtime)
    t *= 1./t[-1]

    # plot double logarithmic CCDF
    plt.loglog(t, frame_times, label=label)

# annotate plot
plt.title("Benchmark.lua Results (Frame Time Distribution)")
plt.xlabel("Percentile (exclusive)")
plt.ylabel("Frame time")
plt.xlim((1e-4, 1))
plt.xticks([0.0001, 0.001, 0.01, 0.1, 1.],
           ["0.01%", "0.1%", "1%", "10%", "100%"])
plt.ylim((0.005, None))
plt.yticks([0.01, 0.1, 1, 10, 100],
           ["10\u202Fms", "100\u202Fms", "1\u202Fs", "10\u202Fs", "100\u202Fs"])
plt.grid()
plt.legend()
plt.tight_layout()
plt.savefig("benchmark.png", dpi=150)
plt.cla()


#%% plot time series

for file, label in zip(sys.argv[1::2], sys.argv[2::2]):
    meta, frame_times, mission_times = load_frametimes(file)
    plt.semilogy(np.cumsum(frame_times), frame_times, label=label)

# annotate plot
plt.title("Benchmark.lua Results (Frame Time)")
plt.xlabel("Benchmark duration (min)")
plt.ylabel("Frame time")
plt.xlim((0, None))
plt.xticks(range(0, 51*60, 5*60), range(0, 51, 5))
plt.ylim((0.005, None))
plt.yticks([0.01, 0.1, 1, 10, 100],
           ["10\u202Fms", "100\u202Fms", "1\u202Fs", "10\u202Fs", "100\u202Fs"])
plt.grid()
plt.legend()
plt.tight_layout()
plt.savefig("benchmark_time.png", dpi=150)
